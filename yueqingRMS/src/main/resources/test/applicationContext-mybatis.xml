<?xml version="1.0" encoding="utf-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="  
             http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd   
             http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd   
             http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd 
             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd   
             http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
             http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"   
            > 
    

	<!-- 引入资源文件 -->
<!-- 	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
<!-- 		<property name="locations"> -->
<!-- 		           <value>classpath*:database.properties</value> -->
<!-- 		</property> -->
<!-- 		<property name="ignoreUnresolvablePlaceholders" value="true" />   -->
<!-- 	</bean> -->
	<context:property-placeholder location="classpath*:database.properties"  ignore-resource-not-found="true" ignore-unresolvable="true"    />
    
    <!--本示例采用DBCP连接池，应预先把DBCP的jar包复制到工程的lib目录下。 -->  
<!-- 	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"   -->
<!--         destroy-method="close" p:driverClassName="com.mysql.jdbc.Driver" -->
<!-- 		p:url="jdbc:mysql://127.0.0.1:6688/yrms?characterEncoding=utf8"  -->
<!-- 		p:username="admin"  -->
<!-- 		p:password="admin" -->
<!-- 		p:maxActive="10"  -->
<!-- 		p:maxIdle="10"> -->
<!--     </bean>  -->

<!-- 	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" -->
<!-- 		destroy-method="close" p:driverClassName="${jdbc.driver}" -->
<!-- 		p:url="${jdbc.url}"  -->
<!-- 		p:username="${jdbc.username}"  -->
<!-- 		p:password="${jdbc.password}" -->
<!-- 		p:maxActive="10"  -->
<!-- 		p:maxIdle="10"> -->
<!-- 	</bean> -->

	<!-- 多数据源配置  (可用啊！)-->  
	<!-- 
   <bean id ="ds_ds1" class= "org.apache.commons.dbcp.BasicDataSource" >  
          <property name ="driverClassName" value= "${jdbc.driver1}"></property >  
          <property name ="url" value= "${jdbc.url1}" ></property >  
          <property name ="username" value="${jdbc.username1}"></property>  
          <property name ="password" value="${jdbc.password1}"></property>  
   </bean >  
   <bean id ="ds_ds2" class= "org.apache.commons.dbcp.BasicDataSource" >  
          <property name ="driverClassName" value= "${jdbc.driver2}"></property >  
          <property name ="url" value= "${jdbc.url2}" ></property >  
          <property name ="username" value="${jdbc.username2}"></property>  
          <property name ="password" value="${jdbc.password2}"></property>  
   </bean >  
   <bean id ="ds_default" class="org.apache.commons.dbcp.BasicDataSource">  
          <property name ="driverClassName" value= "${jdbc.driver}"></property >  
          <property name ="url" value= "${jdbc.url}" ></property >  
          <property name ="username" value="${jdbc.username}"></property>  
          <property name ="password" value="${jdbc.password}"></property>  
   </bean > 
   -->  
   
   <!-- 多数据源配置 jndi  (可用啊！)--> 
   	<bean id="ds_ds1" class="org.springframework.jndi.JndiObjectFactoryBean">  
        <property name="jndiName">  
            <value>java:comp/env/jdbc/yrms1</value>  
        </property>  
    </bean>
   	<bean id="ds_ds2" class="org.springframework.jndi.JndiObjectFactoryBean">  
        <property name="jndiName">  
            <value>java:comp/env/jdbc/yrms2</value>  
        </property>  
    </bean>    
   	<bean id="ds_default" class="org.springframework.jndi.JndiObjectFactoryBean">  
        <property name="jndiName">  
            <value>java:comp/env/jdbc/yrms</value>  
        </property>  
    </bean>  
   
   
   
	
	<!-- 动态配置数据源 -->  
 	<bean id ="dataSource" class= "com.yueqingRMS.platform.tools.dataSourceTool.DynamicDataSource"  lazy-init="false" >  
          <property name ="targetDataSources">  
                <map key-type ="java.lang.String">  
                      <entry value-ref ="ds_ds1" key= "ds_ds1"></entry >  
                      <entry value-ref ="ds_ds2" key= "ds_ds2"></entry >  
                      <entry value-ref ="ds_default" key="ds_default"></entry>  
                </map >  
          </property >  
          <property name ="defaultTargetDataSource" ref= "ds_default"></property >      <!-- 默认使用ds1的数据源 -->  
 	</bean >
 	
 	
 	
 	<!-- 创建SqlSessionFactory -->  
 	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
    	<!--dataSource属性指定要用到的连接池--> 
    	<property name="dataSource" ref="dataSource"/> 
    	<!--configLocation属性指定mybatis的核心配置文件--> 
<!--    	  <property name="configLocation" value="classpath:/mybatis-Configuration.xml" />  -->
    	<!-- 所有配置的mapper文件 -->
<!--  	   <property name="mapperLocations" value="classpath*:com/lz/mapper/*.xml" /> -->
		<!-- 配置的分页拦截器 -->
		<property name="plugins">
            <list>
                <ref bean="paginationInterceptor"/>
            </list>        
        </property>
 	</bean> 
  
  	<!-- MyBatis 接口编程配置  -->
  	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		 <!-- 哪一个文件夹下的Dao层接口使用这个数据源 -->
		 <!-- basePackage指定要扫描的包，在此包之下的映射器都会被搜索到,可指定多个包，包与包之间用逗号或分号分隔--> 
		 <property name="basePackage" value="com.**.domain" />
<!-- 		 <property name="sqlSessionFactory" ref="sqlSessionFactory"/> -->
		 <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
  	</bean>
  	
  
  	<!-- 配置事务 -->
  	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  <property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置事务的传播特性 -->
  	<tx:annotation-driven  transaction-manager="transactionManager" proxy-target-class="true" />
  
	<!-- MyBatis 分页拦截器-->  
    <bean id="paginationInterceptor" class="com.yueqingRMS.platform.interceptor.PageInterceptor" >  
        <property name="dialect" value="mysql"/>   
<!--         拦截Mapper.xml文件中，id包含query字符的语句    -->
        <property name="pageSqlId" value=".*ForPage$"/>  
    </bean>
    
    
    
    
     <!-- 配置事务的传播特性 -->  
     <!-- <tx:advice id ="txAdvice" transaction-manager="transactionManager">  
             <tx:attributes >  
                   <tx:method name ="find*" read-only="true" />  
                   <tx:method name ="get*" read-only="true" />  
                   <tx:method name ="query*" read-only="true" />  
                   <tx:method name ="add*" propagation="REQUIRED" />  
                   <tx:method name ="update*" propagation="REQUIRED" />  
                   <tx:method name ="del*" propagation="REQUIRED" />  
             </tx:attributes >  
      </tx:advice >   --> 
  
</beans> 